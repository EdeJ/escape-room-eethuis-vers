{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","gsap","registerPlugin","Draggable","useEffect","targets","$","draggables","dragElements","document","querySelectorAll","dropElements","dropTiles","Array","prototype","map","call","element","index","tile","parent","value","dataset","create","bounds","type","throwProps","onDragStart","e","classList","remove","onDrag","this","hitTest","child","i","length","dropTile","add","onDragEnd","x","y","rect1","getBoundingClientRect","rect2","left","top","to","target","duration","offset","height","dragList","dropList","distance","css","addEventListener","preventDefault","passive","style","position","bottem","onClick","console","log","answerList","getElementById","myArray","slice","childNodes","isArray","newArray","node","id","toString","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.61f1fc20.chunk.js","sourcesContent":["import { useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './App.css';\r\nimport gsap from 'gsap';\r\nimport Draggable from \"gsap/Draggable\";\r\nimport { ArrowsMove } from 'react-bootstrap-icons';\r\nimport $ from 'jquery';\r\n\r\nfunction App() {\r\n  gsap.registerPlugin(Draggable);\r\n\r\n  useEffect(() => {\r\n    const overlapThreshold = \"0%\";\r\n\r\n    const targets = $(\".target\");\r\n    const draggables = $('.draggable');\r\n\r\n    const dragElements = document.querySelectorAll(\".draggable\");\r\n    const dropElements = document.querySelectorAll(\".target\");\r\n    const dragTiles = Array.prototype.map.call(dragElements, createDragTile);\r\n    const dropTiles = Array.prototype.map.call(dropElements, createDropTile);\r\n\r\n    function createDropTile(element, index) {\r\n      const tile = {\r\n        element: element,\r\n        child: null,\r\n        value: element.dataset.value\r\n      };\r\n      return tile;\r\n    }\r\n\r\n    let top = $('#shared-lists').offset().top + $('.draggable').height();\r\n    const dragList = $('#source-list');\r\n    const dropList = $('#destination-list');\r\n    const distance = $('#shared-lists').height() / 4;\r\n\r\n    for (let i = 0; i < draggables.length; i++) {\r\n      $(draggables[i]).css({ \"position\": \"absolute\", \"top\": `${top}px`, \"left\": `${dragList.left}px` });\r\n      $(targets[i]).css({ \"position\": \"absolute\", \"top\": `${top}px`, \"left\": `${dropList.left}px` });\r\n      top = top + distance;\r\n    }\r\n\r\n    function createDragTile(element, index) {\r\n\r\n      const tile = {\r\n        element: element,\r\n        parent: null,\r\n        value: element.dataset.value\r\n      };\r\n\r\n\r\n      Draggable.create(element, {\r\n        bounds: \"#content\",\r\n        // edgeResistance: 0.65,\r\n        type: \"x,y\",\r\n        throwProps: true,\r\n        onDragStart: function (e) {\r\n          element.classList.remove(\"correct\", \"wrong\");\r\n        },\r\n\r\n        onDrag: function (e) {\r\n          let parent = tile.parent;\r\n          if (parent) {\r\n            if (this.hitTest(parent.element, overlapThreshold)) {\r\n              // exit the function\r\n              // tile is still hitting parent, so no need to proceed any further.\r\n              return;\r\n            }\r\n            // tile is no longer hitting parent, so clear any references between the two\r\n            parent = tile.parent = parent.child = null;\r\n          }\r\n\r\n          for (let i = 0; i < dropTiles.length; i++) {\r\n            const dropTile = dropTiles[i];\r\n            if (dropTile.child) {\r\n              // continue to next loop iteration\r\n              // drop tile already has a child, so no need to proceed any further\r\n              continue;\r\n            }\r\n\r\n            if (this.hitTest(dropTile.element, overlapThreshold)) {\r\n\r\n              // we hit an empty drop tile, so link the two together and exit the function\r\n              tile.parent = dropTile;\r\n              dropTile.child = tile;\r\n              element.classList.add(\"hitting\");\r\n              return;\r\n            }\r\n          }\r\n          // if we made it this far, we're not hitting an empty drop tile\r\n          element.classList.remove(\"hitting\");\r\n        },\r\n\r\n        onDragEnd: function (e) {\r\n\r\n          let x = 0;\r\n          let y = 0;\r\n\r\n          // move to parent\r\n          if (tile.parent) {\r\n\r\n            const rect1 = element.getBoundingClientRect();\r\n            const rect2 = tile.parent.element.getBoundingClientRect();\r\n\r\n            x = \"+=\" + (rect2.left - rect1.left);\r\n            y = \"+=\" + (rect2.top - rect1.top);\r\n          }\r\n\r\n          gsap.to(e.target, { duration: 0.1, x: x, y: y });\r\n          return tile;\r\n        }\r\n      });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // prevent scrolling\r\n    function preventBehavior(e) {\r\n      e.preventDefault();\r\n    }\r\n    document.addEventListener(\"touchmove\", preventBehavior, { passive: false });\r\n\r\n  }, []);\r\n\r\n  function checkAnswer() {\r\n\r\n    console.log('check');\r\n    const answerList = document.getElementById('destination-list');\r\n    // answerList.forEach(element => {\r\n    //   console.log(element.id);\r\n    // });\r\n    // console.log(answerList);\r\n    const myArray = Array.prototype.slice.call(answerList.childNodes);\r\n\r\n    console.log(Array.isArray(myArray));\r\n    console.log(myArray);\r\n\r\n    // const newArray = myArray.reduce((acc, node) => {\r\n    //   return acc + node.id;\r\n    // }, []);\r\n    const newArray = myArray.map(node => (node.id));\r\n    console.log('TO STRING' + newArray.toString());\r\n    // console.log('is EQUEL??? : ' + (newArray.toString() === winningOrder));\r\n\r\n    console.log('reduced array', newArray);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <button style={{ position: 'absolute', bottem: '0' }} onClick={checkAnswer} type=\"button\" className=\"btn btn-lg btn-primary\">Controleer Antwoord</button>\r\n      <h4>1. Zet de volgende koffiesoorten in de volgorde van hoeveelheid melk (versie 3)</h4>\r\n      <div id=\"content\">\r\n        <div id=\"shared-lists\">\r\n          <div className=\"list-box\" id=\"source-list\" >\r\n            <div id=\"2\" className=\"box draggable\">Latte<ArrowsMove className='arrow' /></div>\r\n            <div id=\"0\" className=\"box draggable\">Espresso macchiato<ArrowsMove className='arrow' /></div>\r\n            <div id=\"3\" className=\"box draggable\">Cortado<ArrowsMove className='arrow' /></div>\r\n            <div id=\"1\" className=\"box draggable\">Cappucino<ArrowsMove className='arrow' /></div>\r\n          </div>\r\n          <div className=\"list-box\" id=\"destination-list\">\r\n            <div id=\"0\" className=\"box target\"></div>\r\n            <div id=\"1\" className=\"box target\"></div>\r\n            <div id=\"2\" className=\"box target\"></div>\r\n            <div id=\"3\" className=\"box target\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}