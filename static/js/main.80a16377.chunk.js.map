{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useEffect","sourceList","document","getElementById","destinationList","Sortable","group","animation","sort","ontouchmove","event","preventDefault","id","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"wQAwHeA,MAhHf,WA4FE,OAtFAC,qBAAU,WACR,IAAMC,EAAaC,SAASC,eAAe,eACrCC,EAAkBF,SAASC,eAAe,oBAEhD,IAAIE,IAASJ,EAAY,CACvBK,MAAO,SACPC,UAAW,IACXC,MAAM,IAgBR,IAAIH,IAASD,EAAiB,CAC5BE,MAAO,SACPC,UAAW,MAgCbL,SAASO,YAAc,SAAUC,GAC/BA,EAAMC,oBAGP,IA0BD,gCACE,sGAEA,sBAAKC,GAAG,eAAeC,UAAU,MAAjC,UACE,sBAAKD,GAAG,cAAcC,UAAU,iBAAhC,UACE,qBAAKD,GAAG,IAAIC,UAAU,kBAAtB,qBACA,qBAAKD,GAAG,IAAIC,UAAU,kBAAtB,kCACA,qBAAKD,GAAG,IAAIC,UAAU,kBAAtB,uBACA,qBAAKD,GAAG,IAAIC,UAAU,kBAAtB,4BAGF,qBAAKD,GAAG,mBAAmBC,UAAU,0BCpG9BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvB,SAASC,eAAe,SAM1BW,M","file":"static/js/main.80a16377.chunk.js","sourcesContent":["import { useEffect } from 'react';\r\nimport _ from 'lodash';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './App.css';\r\n\r\nimport Sortable from \"sortablejs\";\r\n// import { Sortable, MultiDrag, Swap, OnSpill, AutoScroll } from \"sortablejs\";\r\n\r\nfunction App() {\r\n\r\n  const winningOrder = \"3,2,1,0\";\r\n  let orderToCheck = [];\r\n\r\n\r\n  useEffect(() => {\r\n    const sourceList = document.getElementById(\"source-list\");\r\n    const destinationList = document.getElementById(\"destination-list\");\r\n\r\n    new Sortable(sourceList, {\r\n      group: 'shared', // set both lists to same group\r\n      animation: 150,\r\n      sort: false,\r\n      // onEnd: function (event) {\r\n      //   console.log('event.oldIndex', event.oldIndex);\r\n      //   console.log('event.newIndex', event.newIndex);\r\n      //   console.log(event.oldDraggableIndex);\r\n      //   console.log(event.newDraggableIndex);\r\n      //   console.log(event.from);\r\n      //   console.log(event.item.id);\r\n      //   orderToCheck.push(event.item.id);\r\n      //   console.log(orderToCheck);\r\n      //   // event.oldIndex; // element's old index within old parent\r\n      //   // event.newIndex; // element's new index within new parent\r\n      // },\r\n\r\n    });\r\n\r\n    new Sortable(destinationList, {\r\n      group: 'shared',\r\n      animation: 150,\r\n      // onEnd: function (event) {\r\n      //   console.log('destinationList', destinationList.childNodes);\r\n\r\n      //   console.log('event.oldIndex', event.oldIndex);\r\n      //   console.log('event.newIndex', event.newIndex);\r\n      //   console.log('fom', event.from);\r\n      //   console.log('to', event.to.children);\r\n      //   // orderToCheck.push(event.item.id);\r\n      //   orderToCheck[event.newIndex] = event.item.id;\r\n      //   console.log(orderToCheck);\r\n      //   // event.oldIndex; // element's old index within old parent\r\n      //   // event.newIndex; // element's new index within new parent\r\n      // },\r\n      // onMove: function (/**Event*/ evt, /**Event*/ originalEvent) {\r\n      //   console.log('move evt', evt);\r\n      //   console.log('move originalEvent', originalEvent);\r\n      //   // // Example: https://jsbin.com/nawahef/edit?js,output\r\n      //   // evt.dragged; // dragged HTMLElement\r\n      //   // evt.draggedRect; // DOMRect {left, top, right, bottom}\r\n      //   // evt.related; // HTMLElement on which have guided\r\n      //   // evt.relatedRect; // DOMRect\r\n      //   // evt.willInsertAfter; // Boolean that is true if Sortable will insert drag element after target by default\r\n      //   // originalEvent.clientY; // mouse position\r\n      //   // // return false; — for cancel\r\n      //   // // return -1; — insert before target\r\n      //   // // return 1; — insert after target\r\n      //   // // return true; — keep default insertion point based on the direction\r\n      //   // // return void; — keep default insertion point based on the direction\r\n      // },\r\n    });\r\n\r\n    document.ontouchmove = function (event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n  }, []);\r\n\r\n  function checkAnswer() {\r\n\r\n    console.log('check');\r\n    const answerList = document.getElementById('destination-list');\r\n    // answerList.forEach(element => {\r\n    //   console.log(element.id);\r\n    // });\r\n    // console.log(answerList);\r\n    const myArray = Array.prototype.slice.call(answerList.childNodes);\r\n\r\n    console.log(Array.isArray(myArray));\r\n    console.log(myArray);\r\n\r\n    // const newArray = myArray.reduce((acc, node) => {\r\n    //   return acc + node.id;\r\n    // }, []);\r\n    const newArray = myArray.map(node => (node.id));\r\n    console.log('TO STRING' + newArray.toString());\r\n    console.log('is EQUEL??? : ' + (newArray.toString() === winningOrder));\r\n\r\n    console.log('reduced array', newArray);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h4>1. Zet de volgende koffiesoorten in de volgorde van hoeveelheid melk\r\n          </h4>\r\n      <div id=\"shared-lists\" className=\"row\">\r\n        <div id=\"source-list\" className=\"list-group col\">\r\n          <div id=\"2\" className=\"list-group-item\">2 Latte</div>\r\n          <div id=\"0\" className=\"list-group-item\">0 Espresso macchiato</div>\r\n          <div id=\"3\" className=\"list-group-item\">3 Cortado</div>\r\n          <div id=\"1\" className=\"list-group-item\">1 Cappucino</div>\r\n        </div>\r\n\r\n        <div id=\"destination-list\" className=\"list-group col\">\r\n        </div>\r\n      </div>\r\n      {/* <button style={{ position: 'absolute', bottem: '0' }} onClick={checkAnswer} type=\"button\" className=\"btn btn-lg btn-primary\">Controleer Antwoord</button> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}