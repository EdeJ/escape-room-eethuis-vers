{"version":3,"sources":["ResultButton.js","Tiles.js","DragGame.js","App.js","reportWebVitals.js","index.js"],"names":["ResultButton","buttenText","status","id","type","className","gsap","registerPlugin","Draggable","Tiles","tileData","checkAllCorrect","useState","setButtonText","setStatus","useEffect","targets","$","draggables","dragElements","document","querySelectorAll","dropElements","dropTiles","Array","prototype","map","call","element","index","tile","parent","value","dataset","create","bounds","throwProps","onDragStart","e","classList","remove","onDrag","this","hitTest","child","i","length","dropTile","add","removeClass","onDragEnd","x","y","rect1","getBoundingClientRect","rect2","left","top","to","duration","allDroped","console","log","getElementById","addEventListener","allCorrect","setTimeout","dragList","dropList","distance","height","css","order","name","DragGame","setFinished","setAllcorrect","App","preventDefault","passive","showDragGame","setShowDragGame","dragGameFinished","setDragGameFinished","onClick","isFinished","style","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.98d75ded.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction ResultButton({ buttenText, status }) {\r\n\r\n    return (\r\n        <button\r\n            id=\"check\"\r\n            type=\"button\"\r\n            className={`btn btn-lg btn-primary ${status}`}\r\n        >\r\n            {buttenText}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default ResultButton\r\n","import React, { useEffect, useState } from 'react'\r\nimport $ from 'jquery';\r\nimport { ArrowsMove } from 'react-bootstrap-icons';\r\n// import 'bootstrap/dist/css/bootstrap.css';\r\nimport gsap from 'gsap';\r\nimport Draggable from \"gsap/Draggable\";\r\nimport './App.css';\r\nimport ResultButton from './ResultButton';\r\n\r\ngsap.registerPlugin(Draggable);\r\n\r\nfunction Tiles({ tileData, checkAllCorrect }) {\r\n\r\n    const [buttenText, setButtonText] = useState('Controleer Antwoord');\r\n\r\n    const [allTilesDroped, setAllTilesDroped] = useState(false);\r\n    const [status, setStatus] = useState('hidden');\r\n\r\n    useEffect(() => {\r\n        const overlapThreshold = \"10%\";\r\n\r\n        const targets = $(\".target\");\r\n        const draggables = $('.draggable');\r\n\r\n        const dragElements = document.querySelectorAll(\".draggable\");\r\n        const dropElements = document.querySelectorAll(\".target\");\r\n\r\n        const dragTiles = Array.prototype.map.call(dragElements, createDragTile);\r\n        const dropTiles = Array.prototype.map.call(dropElements, createDropTile);\r\n\r\n        console.log(dropTiles);\r\n\r\n        const checkButton = document.getElementById('check');\r\n        checkButton.addEventListener(\"click\", checkTiles);\r\n\r\n\r\n        function checkTiles() {\r\n            let allCorrect = true;\r\n\r\n            for (let i = 0; i < dropTiles.length; i++) {\r\n                const tile = dropTiles[i];\r\n                if (!tile.child) {\r\n                    allCorrect = false;\r\n                    continue;\r\n                }\r\n                if (tile.element.id !== tile.child.element.id) {\r\n                    console.log('false');\r\n                    allCorrect = false;\r\n                }\r\n\r\n            }\r\n            if (allCorrect) {\r\n                setButtonText('Goed');\r\n                setStatus('correct');\r\n                setTimeout(function () { checkAllCorrect(true); }, 3000);\r\n            } else {\r\n                setButtonText('fout');\r\n                setStatus('wrong');\r\n                checkAllCorrect(false);\r\n            }\r\n        }\r\n\r\n        function createDropTile(element, index) {\r\n            const tile = {\r\n                element: element,\r\n                child: null,\r\n                value: element.dataset.value\r\n            };\r\n            return tile;\r\n        }\r\n\r\n        let top = 30; // de helft van de hoogte van een draggable, om het te centreren.\r\n        const dragList = $('#drag-list');\r\n        const dropList = $('#drop-list');\r\n        const distance = $('#shared-lists').height() / 4;\r\n\r\n        for (let i = 0; i < draggables.length; i++) {\r\n            $(draggables[i]).css({ \"position\": \"absolute\", \"top\": `${top}px`, \"left\": `${dragList.left}px` });\r\n            $(targets[i]).css({ \"position\": \"absolute\", \"top\": `${top}px`, \"left\": `${dropList.left}px` });\r\n            top = top + distance;\r\n        }\r\n\r\n\r\n\r\n        function createDragTile(element, index) {\r\n\r\n            const tile = {\r\n                element: element,\r\n                parent: null,\r\n                value: element.dataset.value\r\n            };\r\n\r\n            Draggable.create(element, {\r\n                bounds: \"#content\",\r\n                // edgeResistance: 0.65,\r\n                type: \"x,y\",\r\n                throwProps: true,\r\n                onDragStart: function (e) {\r\n                    element.classList.remove(\"correct\", \"wrong\");\r\n                },\r\n\r\n                onDrag: function (e) {\r\n                    let parent = tile.parent;\r\n                    if (parent) {\r\n                        if (this.hitTest(parent.element, overlapThreshold)) {\r\n                            // exit the function\r\n                            // tile is still hitting parent, so no need to proceed any further.\r\n                            return;\r\n                        }\r\n                        // tile is no longer hitting parent, so clear any references between the two\r\n                        parent = tile.parent = parent.child = null;\r\n                    }\r\n\r\n                    for (let i = 0; i < dropTiles.length; i++) {\r\n                        const dropTile = dropTiles[i];\r\n                        if (dropTile.child) {\r\n                            // continue to next loop iteration\r\n                            // drop tile already has a child, so no need to proceed any further\r\n                            continue;\r\n                        }\r\n\r\n                        if (this.hitTest(dropTile.element, overlapThreshold)) {\r\n\r\n                            // we hit an empty drop tile, so link the two together and exit the function\r\n                            tile.parent = dropTile;\r\n                            dropTile.child = tile;\r\n                            tile.parent.element.classList.add(\"hitting\");\r\n                            return;\r\n                        }\r\n                    }\r\n                    // if we made it this far, we're not hitting an empty drop tile\r\n                    targets.removeClass(\"hitting\");\r\n                },\r\n\r\n                onDragEnd: function () {\r\n                    // const p = $(element).position();\r\n                    // let x = p.x;\r\n                    // let y = p.y;\r\n                    let x = 0;\r\n                    let y = 0;\r\n\r\n                    // move to parent\r\n                    if (tile.parent) {\r\n                        const rect1 = element.getBoundingClientRect();\r\n                        const rect2 = tile.parent.element.getBoundingClientRect();\r\n\r\n                        x = \"+=\" + (rect2.left - rect1.left);\r\n                        y = \"+=\" + (rect2.top - rect1.top);\r\n                    }\r\n                    gsap.to(element, { duration: 0.2, x: x, y: y });\r\n\r\n                    // Als alle tile gelegd zijn\r\n                    let allDroped = true;\r\n                    for (let i = 0; i < dropTiles.length; i++) {\r\n                        const tile = dropTiles[i];\r\n                        if (!tile.child) {\r\n                            allDroped = false;\r\n                            continue;\r\n                        }\r\n                    }\r\n                    // allDroped ? setAllTilesDroped(true) : setAllTilesDroped(false);\r\n                    if (allDroped) {\r\n                        setStatus('')\r\n                    } else {\r\n                        setStatus('hidden');\r\n                        setButtonText('Controleer Antwoord');\r\n                    }\r\n\r\n                    return tile;\r\n                }\r\n            });\r\n        }\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div id=\"content\">\r\n            <div id=\"shared-lists\">\r\n                <div className=\"list-box\" id=\"drag-list\" >\r\n                    {tileData.map((tile, i) => (\r\n                        <div key={i} id={tile.order} className=\"box draggable\">{tile.name}<ArrowsMove className='arrow' /></div>\r\n                    ))}\r\n                    <ResultButton buttenText={buttenText} status={status} />\r\n                </div>\r\n                <div className=\"list-box\" id=\"drop-list\">\r\n                    {tileData.map((tile, i) => (\r\n                        <div key={i} id={i} className=\"box target\"></div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tiles\r\n","import React, { useState } from 'react'\r\nimport Tiles from './Tiles';\r\n\r\nfunction DragGame({ setFinished }) {\r\n    const tileData = [\r\n        {\r\n            order: 2,\r\n            name: '2 Latte'\r\n        }, {\r\n            order: 0,\r\n            name: '0 Espresso macchiato'\r\n        },\r\n        {\r\n            order: 3,\r\n            name: '3 Cortado'\r\n        },\r\n        {\r\n            order: 1,\r\n            name: '1 Cappucino'\r\n        }\r\n    ];\r\n\r\n    const [allCorrect, setAllcorrect] = useState(false);\r\n\r\n    function checkAllCorrect(allCorrect) {\r\n        allCorrect ? setAllcorrect(true) : setAllcorrect(false);\r\n        allCorrect ? setFinished(true) : setFinished(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <header>\r\n                {/* <div>all Correct: {allCorrect ? 'YES' : 'NO'}</div> */}\r\n                <h4>1. Zet de volgende koffiesoorten in de volgorde van hoeveelheid melk (versie 8-11)</h4>\r\n            </header>\r\n            <Tiles\r\n                tileData={tileData}\r\n                checkAllCorrect={checkAllCorrect}\r\n            />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DragGame\r\n","import { useEffect, useState } from 'react';\r\nimport DragGame from './DragGame';\r\n\r\nfunction App() {\r\n\r\n  // prevent scrolling\r\n  function preventBehavior(e) {\r\n    e.preventDefault();\r\n  }\r\n  document.addEventListener(\"touchmove\", preventBehavior, { passive: false });\r\n\r\n  const [showDragGame, setShowDragGame] = useState(false);\r\n  const [dragGameFinished, setDragGameFinished] = useState(false);\r\n\r\n  function setFinished(isFinished) {\r\n    if (isFinished) {\r\n      setDragGameFinished(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {showDragGame || (\r\n        <button onClick={() => setShowDragGame(true)} type=\"button\" className=\"btn btn-lg btn-primary\">play drag game</button>\r\n      )}\r\n      {(!dragGameFinished && showDragGame) && <DragGame setFinished={setFinished} />}\r\n      {dragGameFinished && <h1 style={{ color: 'white' }} >drag game finished!</h1>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}